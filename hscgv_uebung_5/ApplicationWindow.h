/*!  \file
 * \brief Declaration of the ApplicationWindow main window class for our application
 *
 * Programmierpraktikum Computergrafik (CGP): Aufgabe 1 - "Ui, OpenGL!"
 *
 * Created by Christian Vogelgsang <Vogelgsang@informatik.uni-erlangen.de>,
 * changed by Martin Aumueller <aumueller@uni-koeln.de>
 */


/*! \file ui_ApplicationWindow.h
 * \brief Ui::ApplicationWindow class generated by Qt Designer
 */

/*! \class Ui::ApplicationWindow
 * \brief UI class generated by Qt Designer
 */

/*! \class Ui_ApplicationWindow
 * \brief UI class generated by Qt Designer
 */

#ifndef APPWIN_H
#define APPWIN_H

// Qt include files
#include <QMainWindow>
#include "ui_ApplicationWindow.h"
#include "GLFrame.h"

class GLFrame;

/*! Declaration of ApplicationWindow the main application window.
  This ApplicationWindow contains a GLFrame for rendering the 3D object.
  You can interact with the object by moving the mouse over
  the rendering area. */

//! application main window
class ApplicationWindow : public QMainWindow
{
    // place this macro here to include the standard Qt object
    // defitions
    Q_OBJECT

    public:

        //! create an application window and pass the application object
        ApplicationWindow(const unsigned char * userData);

        //! destroy application window
        virtual ~ApplicationWindow();

        //! user data
        const unsigned char* m_userData;

    // ----- signal definitions for our Application -----
    signals:
        //! reset camera position and orientation to default values
        void resetCam();
        //! reset light position to default values
        void resetLight();
        //! request to open another model
        void openFile(const QString &filename) const;

        //! render mode was changed
        void renderMode(int mode) const;

    protected:
        //! initialize application state
        void initState() const;

        //! our main widget in the application is a OGLCanvas
        GLFrame *m_frame;

        //! timer for triggering continuous re-rendering
        QTimer *m_trigger;

        //! designer ui
        Ui::ApplicationWindow ui;

    // ----- slot definitions for our Application -----
    private slots:

        //! slot for File/Quit menu
        void fileQuit();

        //! slot to update statusbar message
        void updateMessage(const QString& message);

        //! show a file browser and load model
        void loadFile();

        //! load model from file
        void loadFile(QString filename);

        //! update FPS display
        void updateFps();

        //! start and stop render timer
        void animate(bool on);

        //! deduce render mode from menu state
        int getRenderMode() const;

        //! make sure that render mode signal is triggerd
        void renderModeChanged() const;

        //! we want to have some nice output
        void antialiasingChanged() const;

    private:
       //! store status bar message
        QString m_message;
        //! revert to default message if time is up
        int m_secondsToDisplay;
};

#endif
